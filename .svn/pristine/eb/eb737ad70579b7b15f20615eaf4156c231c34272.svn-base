package com.geetion.job138.fragment;

import java.util.List;
import java.util.Map;

import com.geetion.job138.R;
import com.geetion.job138.activity.MyResumeActivity;
import com.geetion.job138.activity.PersonalApplyActivity;
import com.geetion.job138.activity.PersonalFavoriteActivity;
import com.geetion.job138.activity.PersonalInviteActivity;
import com.geetion.job138.activity.PersonalLeaveActivity;
import com.geetion.job138.activity.PersonalPasswordActivity;
import com.geetion.job138.activity.PersonalSeemActivity;
import com.geetion.job138.activity.PersonalStatusActivity;
import com.geetion.job138.activity.PersonalTelActivity;
import com.geetion.job138.activity.group.BaseGroupActivity;
import com.geetion.job138.imagecache.ImageLoader;
import com.geetion.job138.model.MemberMessage;
import com.geetion.job138.model.ResumeInfo;
import com.geetion.job138.service.IndexPageService;
import com.geetion.job138.service.PersonInfoSave;
import com.geetion.job138.service.ResumeInfoService;
import com.geetion.job138.service.ResumeManageService;
import com.geetion.job138.service.SettingService;
import com.geetion.job138.util.AndroidUtil;
import com.geetion.job138.util.MyHttpException;
import com.geetion.job138.util.UIUtil;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.Html;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.LinearLayout.LayoutParams;

public class PersonalCenterFragment extends BaseFragment {
	public static String TAG = PersonalCenterFragment.class.getName();
	private BaseGroupActivity activity;
	private ImageButton registerButton, noChooseButton;
	private int[] buttonIDs = { R.id.resume, R.id.work, R.id.setting };
	private int[] arrowIDs = { R.id.arrow_resume, R.id.arrow_work, R.id.arrow_setting };
	private int[] layoutIDs = { R.id.resume_layout, R.id.work_layout, R.id.setting_layout };
	private RelativeLayout noPicLayout, picLayout, myResumeLayout;
	private LinearLayout photoShowLayout;
	private TextView inviteView, applyView, favoriteView, seemView, leaveView, passwordView, telView, statusView, titleView, emailView, topStatusView,
			topTelView, resumeTimeView;
	private ImageView avaterView;
	private GetMemberMessageTask task;
	private GetMemberPhotoTask photoTask;
	private ImageLoader imageLoader;
	private GetResumeMessageTask messageTask;
	private GetIndexPeronTask indexPersonTask;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_personal_center, container, false);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		activity = (BaseGroupActivity) getActivity();
		init();
		getData();
		super.onActivityCreated(savedInstanceState);
	}

	public void getData() {
		task = new GetMemberMessageTask();
		task.execute();
		photoTask = new GetMemberPhotoTask();
		photoTask.execute();
		messageTask = new GetResumeMessageTask();
		messageTask.execute();
		indexPersonTask = new GetIndexPeronTask();
		indexPersonTask.execute();
	}

	public void init() {
		imageLoader = new ImageLoader(activity);
		for (int i = 0; i < 3; i++) {
			Button button = (Button) getView().findViewById(buttonIDs[i]);
			button.setOnClickListener(this);
		}
		noPicLayout = (RelativeLayout) getView().findViewById(R.id.no_pic_layout);
		noChooseButton = (ImageButton) getView().findViewById(R.id.choose_photo);
		noChooseButton.setOnClickListener(this);
		picLayout = (RelativeLayout) getView().findViewById(R.id.pic_layout);
		inviteView = (TextView) getView().findViewById(R.id.invite);
		inviteView.setOnClickListener(this);
		applyView = (TextView) getView().findViewById(R.id.apply_record);
		applyView.setOnClickListener(this);
		favoriteView = (TextView) getView().findViewById(R.id.favorite);
		favoriteView.setOnClickListener(this);
		seemView = (TextView) getView().findViewById(R.id.seem);
		seemView.setOnClickListener(this);
		leaveView = (TextView) getView().findViewById(R.id.leave);
		leaveView.setOnClickListener(this);
		passwordView = (TextView) getView().findViewById(R.id.password);
		passwordView.setOnClickListener(this);
		telView = (TextView) getView().findViewById(R.id.tel_status);
		telView.setOnClickListener(this);
		statusView = (TextView) getView().findViewById(R.id.apply_status);
		statusView.setOnClickListener(this);
		titleView = (TextView) getView().findViewById(R.id.title);
		titleView.setText(SettingService.loginMessage.getUserName());
		emailView = (TextView) getView().findViewById(R.id.email);
		topStatusView = (TextView) getView().findViewById(R.id.status);
		topTelView = (TextView) getView().findViewById(R.id.tel);
		topTelView.setOnClickListener(this);
		avaterView = (ImageView) getView().findViewById(R.id.imageView1);
		photoShowLayout = (LinearLayout) getView().findViewById(R.id.photo_show);
		resumeTimeView = (TextView) getView().findViewById(R.id.resume_time);
		myResumeLayout = (RelativeLayout) getView().findViewById(R.id.my_resume_layout);
		myResumeLayout.setOnClickListener(this);
		activity.setTotalLoading(4);
	}

	@Override
	public void onClick(View v) {
		if (v == registerButton) {
			// activity.changeFragmentAnOnResume(RegisterFragment.TAG, null);
		} else if (v.getId() == buttonIDs[0]) {
			changeLayout(0);
		} else if (v.getId() == buttonIDs[1]) {
			changeLayout(1);
		} else if (v.getId() == buttonIDs[2]) {
			changeLayout(2);
		} else if (v == noChooseButton) {

		} else if (v == applyView) {
			Intent intent = new Intent(activity, PersonalApplyActivity.class);
			startActivity(intent);
		} else if (v == favoriteView) {
			Intent intent = new Intent(activity, PersonalFavoriteActivity.class);
			startActivity(intent);
		} else if (v == inviteView) {
			Intent intent = new Intent(activity, PersonalInviteActivity.class);
			startActivity(intent);
		} else if (v == seemView) {
			Intent intent = new Intent(activity, PersonalSeemActivity.class);
			startActivity(intent);
		} else if (v == leaveView) {
			Intent intent = new Intent(activity, PersonalLeaveActivity.class);
			startActivity(intent);
		} else if (v == passwordView) {
			Intent intent = new Intent(activity, PersonalPasswordActivity.class);
			startActivity(intent);
		} else if (v == telView || v == topTelView) {
			Intent intent = new Intent(activity, PersonalTelActivity.class);
			startActivity(intent);
		} else if (v == statusView) {
			Intent intent = new Intent(activity, PersonalStatusActivity.class);
			startActivity(intent);
		} else if (v == myResumeLayout) {
			Intent intent = new Intent(activity, MyResumeActivity.class);
			startActivity(intent);
		}
	}

	public void changeLayout(int num) {
		for (int i = 0; i < 3; i++) {
			Button button = (Button) getView().findViewById(buttonIDs[i]);
			button.setBackgroundResource(R.drawable.bg_button_main_0);
			View arrow = getView().findViewById(arrowIDs[i]);
			arrow.setVisibility(View.GONE);
			View layout = getView().findViewById(layoutIDs[i]);
			layout.setVisibility(View.GONE);
		}

		Button button = (Button) getView().findViewById(buttonIDs[num]);
		button.setBackgroundResource(R.drawable.bg_button_main_1);
		View arrow = getView().findViewById(arrowIDs[num]);
		arrow.setVisibility(View.VISIBLE);
		View layout = getView().findViewById(layoutIDs[num]);
		layout.setVisibility(View.VISIBLE);
	}

	@Override
	public void onDestroy() {
		if (task != null)
			task.cancel(false);
		if (photoTask != null)
			photoTask.cancel(false);
		if (indexPersonTask != null)
			indexPersonTask.cancel(false);
		if (messageTask != null)
			messageTask.cancel(false);
		super.onDestroy();
	}

	/**
	 * 获取个人风采
	 */
	public class GetMemberPhotoTask extends AsyncTask<Void, Integer, List<Map<String, String>>> {
		protected void onPreExecute() {
			activity.showLoadiing();
		};

		@Override
		protected List<Map<String, String>> doInBackground(Void... arg0) {
			try {
				List<Map<String, String>> photoList = ResumeInfoService.getPersonImage(PersonInfoSave.memberInfo.getMemberId());
				return photoList;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(List<Map<String, String>> photoList) {
			activity.hideLoading();
			if (photoList == null || photoList.isEmpty()) {
				noPicLayout.setVisibility(View.VISIBLE);
				picLayout.setVisibility(View.GONE);
			} else {
				noPicLayout.setVisibility(View.GONE);
				picLayout.setVisibility(View.VISIBLE);
				addPhoto(photoList);
			}
		}
	}

	public void addPhoto(List<Map<String, String>> list) {
		for (Map<String, String> map : list) {
			ImageView imageView = new ImageView(activity);
			LinearLayout.LayoutParams params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.FILL_PARENT);
			params.setMargins(AndroidUtil.dpToPx(5, activity), 0, AndroidUtil.dpToPx(5, activity), 0);
			imageView.setBackgroundResource(R.drawable.gray_border);
			imageView.setPadding(4, 2, 4, 2);
			imageView.setLayoutParams(params);
			imageView.setScaleType(ScaleType.CENTER_CROP);
			// String url = map.get("SmallImage");
			String url = "http://t12.baidu.com/it/u=2252355338,565609814&fm=58";
			imageLoader.DisplayImage(url, imageView, R.drawable.image_avatar_0, 0, 0);
			photoShowLayout.addView(imageView);
		}
	}

	/**
	 * 获取会员信息
	 */
	public class GetMemberMessageTask extends AsyncTask<Void, Integer, MemberMessage> {
		protected void onPreExecute() {
			activity.showLoadiing();
		};

		@Override
		protected MemberMessage doInBackground(Void... arg0) {
			try {
				Log.e("memberId", PersonInfoSave.memberInfo.getMemberId() + "");
				MemberMessage message = ResumeInfoService.getPersonalInfo(PersonInfoSave.memberInfo.getMemberId(), PersonInfoSave.resumeInfo.getId());
				return message;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(MemberMessage memberInfo) {
			activity.hideLoading();
			if (memberInfo == null)
				return;
			PersonInfoSave.saveMemberMessage(memberInfo);
			resetMessage();
		}
	}

	public void resetMessage() {
		emailView.setText(PersonInfoSave.memberInfo.getEmail());
		topTelView.setText(PersonInfoSave.memberInfo.getMobile());
		if (PersonInfoSave.memberInfo.getStatus() != null)
			topStatusView.setText(PersonInfoSave.memberInfo.getStatus().split("\\|")[0]);
		else
			topStatusView.setText("未设置");
		if (!TextUtils.isEmpty(PersonInfoSave.memberInfo.getAvatar()))
			imageLoader.DisplayImage(PersonInfoSave.memberInfo.getAvatar(), avaterView, R.drawable.image_avatar_0, AndroidUtil.dpToPx(58, activity),
					AndroidUtil.dpToPx(68, activity));
	}

	/**
	 * 获取简历信息
	 */
	public class GetResumeMessageTask extends AsyncTask<Void, Integer, ResumeInfo> {
		protected void onPreExecute() {
			activity.showLoadiing();
		};

		@Override
		protected ResumeInfo doInBackground(Void... arg0) {
			try {
				Log.e("memberId", PersonInfoSave.memberInfo.getMemberId() + "");
				ResumeInfo resumeInfo = ResumeInfoService.getMyResume(PersonInfoSave.resumeInfo.getId());
				return resumeInfo;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(ResumeInfo resumeInfo) {
			activity.hideLoading();
			if (resumeInfo != null) {
				PersonInfoSave.resumeInfo.setDate(resumeInfo.getDate());
				PersonInfoSave.resumeInfo.setRefreshDate(resumeInfo.getRefreshDate());
				resumeTimeView.setText("创建时间: " + resumeInfo.getDate() + "    刷新时间: " + resumeInfo.getRefreshDate());
				resumeTimeView.setVisibility(View.VISIBLE);
			}
		}
	}

	/**
	 * 获取简历信息
	 */
	public class GetIndexPeronTask extends AsyncTask<Void, Integer, MemberMessage> {
		protected void onPreExecute() {
			activity.showLoadiing();
		};

		@Override
		protected MemberMessage doInBackground(Void... arg0) {
			try {
				Log.e("memberId", PersonInfoSave.memberInfo.getMemberId() + "");
				MemberMessage memberMessage = IndexPageService.getMemberMessage(PersonInfoSave.memberInfo.getMemberId());
				return memberMessage;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(MemberMessage memberMessage) {
			activity.hideLoading();
			if (memberMessage != null) {
				PersonInfoSave.saveMemberMessage(memberMessage);
				inviteView.setText(Html.fromHtml("面试邀请<font color='red'>(" + PersonInfoSave.memberInfo.getNoInterview() + ")</font>"));
			}
		}
	}

	@Override
	public void onResume() {
		resetMessage();
		super.onResume();
	}

}
