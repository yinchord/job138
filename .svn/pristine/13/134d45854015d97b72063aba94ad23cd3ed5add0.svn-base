package com.geetion.job138.activity;

import java.util.ArrayList;

import java.util.List;
import com.geetion.job138.R;
import com.geetion.job138.service.SettingService;
import com.geetion.job138.util.AndroidUtil;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;

public class WelcomeActivity extends BaseActivity {
	private ViewPager viewPager;
	private List<ImageView> pageViews;
	// 用来表示每个小圆点的imageView
	private ImageView[] imageViews;
	// 包裹圆点的LinearLayout
	private LinearLayout group;

	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		if (SettingService.isShowedHelp(context)) {
			SettingService.saveHelpShowed(context);
			Intent intent = new Intent(context, TabWidgetActivity.class);
			startActivity(intent);
			finish();
			return;
		}
		setContentView(R.layout.activity_welcome);
		initView();
	}

	private void initView() {
		pageViews = new ArrayList<ImageView>();
		for (int i = 1; i <= 3; i++) {
			ImageView pic = new ImageView(this);
			int resid = getResources().getIdentifier("p" + i, "drawable", this.getPackageName());
			pic.setBackgroundResource(resid);
			pageViews.add(pic);
		}
		imageViews = new ImageView[pageViews.size()];
		viewPager = (ViewPager) findViewById(R.id.awesomepager);
		group = (LinearLayout) findViewById(R.id.viewGroup);
		for (int i = 0; i < pageViews.size(); i++) {
			imageViews[i] = new ImageView(this);
			imageViews[i].setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
			imageViews[i].setPadding(AndroidUtil.dpToPx(5, this), 0, AndroidUtil.dpToPx(5, this), 0);
			if (i == 0) {
				imageViews[i].setImageResource(R.drawable.point1);
			} else {
				imageViews[i].setImageResource(R.drawable.point0);
			}
			group.addView(imageViews[i]);
			viewPager.setAdapter(new PagerAdapter() {

				@Override
				public boolean isViewFromObject(View arg0, Object arg1) {
					return arg0 == arg1;
				}

				@Override
				public int getCount() {
					return pageViews.size();
				}

				@Override
				public int getItemPosition(Object object) {
					return super.getItemPosition(object);
				}

				@Override
				public void destroyItem(View arg0, int arg1, Object arg2) {
					((ViewPager) arg0).removeView(pageViews.get(arg1));
				}

				@Override
				public Object instantiateItem(View arg0, int arg1) {
					if (arg1 == 2) {
						LayoutInflater mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
						View layout = mInflater.inflate(R.layout.item_welcome_last, null);
						ImageButton imageButton = (ImageButton) layout.findViewById(R.id.ok);
						imageButton.setOnClickListener(new OnClickListener() {
							@Override
							public void onClick(View v) {
								SettingService.saveHelpShowed(context);
								Intent intent = new Intent(context, TabWidgetActivity.class);
								startActivity(intent);
								finish();
							}
						});
						((ViewPager) arg0).addView(layout);
						return layout;
					}
					ImageView pic = pageViews.get(arg1);
					((ViewPager) arg0).addView(pic);
					return pageViews.get(arg1);
				}
			});
			viewPager.setOnPageChangeListener(new OnPageChangeListener() {

				@Override
				public void onPageSelected(int arg0) {
					for (int i = 0; i < imageViews.length; i++) {
						imageViews[arg0].setImageResource(R.drawable.point1);

						if (arg0 != i) {
							imageViews[i].setImageResource(R.drawable.point0);
						}
					}
				}

				@Override
				public void onPageScrolled(int arg0, float arg1, int arg2) {
				}

				@Override
				public void onPageScrollStateChanged(int arg0) {
				}
			});
		}
	}

	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub

	}
}
