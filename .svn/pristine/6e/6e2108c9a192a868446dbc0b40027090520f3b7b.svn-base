package com.geetion.job138.activity;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.geetion.job138.R;
import com.geetion.job138.model.CityInfo;
import com.geetion.job138.service.CacheService;
import com.geetion.job138.service.SearchJobService;
import com.geetion.job138.util.FuncUtil;
import com.geetion.job138.util.MyHttpException;
import com.geetion.job138.util.UIUtil;
import com.geetion.job138.widget.sortlist.CharacterParser;
import com.geetion.job138.widget.sortlist.ClearEditText;
import com.geetion.job138.widget.sortlist.PinyinComparator;
import com.geetion.job138.widget.sortlist.SideBar;
import com.geetion.job138.widget.sortlist.SortAdapter;
import com.geetion.job138.widget.sortlist.SortModel;
import com.geetion.job138.widget.sortlist.SideBar.OnTouchingLetterChangedListener;
import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

public class SortActivity extends Activity implements OnClickListener {
	private ListView sortListView;
	private SideBar sideBar;
	private TextView dialog, selectText;
	private SortAdapter adapter;
	private ClearEditText mClearEditText;
	private ImageButton backButton;
	private ProgressBar sorProgressBar;
	private FrameLayout sortContext;
	private GetCitiesTask getCitiesTask;
	private Activity activity;

	/**
	 * ����ת����ƴ������
	 */
	private CharacterParser characterParser;
	private List<SortModel> SourceDateList;

	/**
	 * ���ƴ��������ListView����������
	 */
	private PinyinComparator pinyinComparator;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_sortlist);
		activity = this;
		initViews();
	}

	private void initViews() {

		// ʵ����תƴ����
		characterParser = CharacterParser.getInstance();
		pinyinComparator = new PinyinComparator();
		backButton = (ImageButton) findViewById(R.id.button_back);
		selectText = (TextView) findViewById(R.id.title);
		sideBar = (SideBar) findViewById(R.id.sidrbar);
		dialog = (TextView) findViewById(R.id.dialog);
		sorProgressBar = (ProgressBar) findViewById(R.id.sort_progressBar);
		sortContext = (FrameLayout) findViewById(R.id.sort_context);
		sideBar.setTextView(dialog);
		backButton.setOnClickListener(this);
		// �����Ҳഥ������
		sideBar.setOnTouchingLetterChangedListener(new OnTouchingLetterChangedListener() {

			@Override
			public void onTouchingLetterChanged(String s) {
				// ����ĸ�״γ��ֵ�λ��
				int position = adapter.getPositionForSection(s.charAt(0));
				if (position != -1) {
					sortListView.setSelection(position);
				}

			}
		});

		sortListView = (ListView) findViewById(R.id.country_lvcountry);
		sortListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				selectText.setText(((SortModel) adapter.getItem(position)).getName());
			}
		});

		// // ���a-z��������Դ���
		// Collections.sort(SourceDateList, pinyinComparator);
		// adapter = new SortAdapter(this, SourceDateList);
		// sortListView.setAdapter(adapter);
		//
		// mClearEditText = (ClearEditText) findViewById(R.id.filter_edit);
		//
		// // ������������ֵ�ĸı�����������
		// mClearEditText.addTextChangedListener(new TextWatcher() {
		//
		// @Override
		// public void onTextChanged(CharSequence s, int start, int before,
		// int count) {
		// // ������������ֵΪ�գ�����Ϊԭ�����б?����Ϊ��������б�
		// filterData(s.toString());
		// }
		//
		// @Override
		// public void beforeTextChanged(CharSequence s, int start, int count,
		// int after) {
		//
		// }
		//
		// @Override
		// public void afterTextChanged(Editable s) {
		// }
		// });
		//
		// selectText.setText(getIntent().getStringExtra("data"));
	}

	/**
	 * ΪListView������
	 * 
	 * @param date
	 * @return
	 */
	private List<SortModel> filledData(String[] date) {
		List<SortModel> mSortList = new ArrayList<SortModel>();

		for (int i = 0; i < date.length; i++) {
			SortModel sortModel = new SortModel();
			sortModel.setName(date[i]);
			// ����ת����ƴ��
			String pinyin = characterParser.getSelling(date[i]);
			String sortString = pinyin.substring(0, 1).toUpperCase();

			// ������ʽ���ж�����ĸ�Ƿ���Ӣ����ĸ
			if (sortString.matches("[A-Z]")) {
				sortModel.setSortLetters(sortString.toUpperCase());
			} else {
				sortModel.setSortLetters("#");
			}

			mSortList.add(sortModel);
		}
		return mSortList;

	}

	/**
	 * ���������е�ֵ��������ݲ�����ListView
	 * 
	 * @param filterStr
	 */
	private void filterData(String filterStr) {
		List<SortModel> filterDateList = new ArrayList<SortModel>();

		if (TextUtils.isEmpty(filterStr)) {
			filterDateList = SourceDateList;
		} else {
			filterDateList.clear();
			for (SortModel sortModel : SourceDateList) {
				String name = sortModel.getName();
				if (name.indexOf(filterStr.toString()) != -1 || characterParser.getSelling(name).startsWith(filterStr.toString())) {
					filterDateList.add(sortModel);
				}
			}
		}

		// ���a-z��������
		Collections.sort(filterDateList, pinyinComparator);
		adapter.updateListView(filterDateList);
	}

	@Override
	public void onClick(View v) {
		if (backButton == v) {
			Intent data = new Intent();
			data.putExtra("data", selectText.getText());
			setResult(RESULT_OK, data);
			finish();
		}
	}

	private class GetCitiesTask extends AsyncTask<Void, Integer, List<CityInfo>> {

		@Override
		protected List<CityInfo> doInBackground(Void... params) {
			try {
				List<CityInfo> list = SearchJobService.getCityInfo();
				return list;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(List<CityInfo> result) {

		}

	}
}
