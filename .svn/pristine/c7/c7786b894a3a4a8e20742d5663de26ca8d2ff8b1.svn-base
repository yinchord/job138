package com.geetion.job138.imagecache;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.view.View;
import android.widget.ImageView;

public class ImageLoader {

	public MemoryCache memoryCache = new MemoryCache();
	FileCache fileCache;
	private Map<ImageView, String> imageViews = Collections.synchronizedMap(new WeakHashMap<ImageView, String>());
	private Map<ImageView, onLoadingFinishListener> listeners = Collections.synchronizedMap(new WeakHashMap<ImageView, onLoadingFinishListener>());
	private Map<ImageView, Integer> heights = Collections.synchronizedMap(new WeakHashMap<ImageView, Integer>());
	private Map<ImageView, Integer> widths = Collections.synchronizedMap(new WeakHashMap<ImageView, Integer>());
	// 线程池
	ExecutorService executorService;
	public onLoadingFinishListener onLoadingFinishListener;

	public interface onLoadingFinishListener {
		void onFinish(Bitmap bitmap, ImageView imageView, List<View> list);
	};

	public ImageLoader(Context context) {
		fileCache = new FileCache(context);
		executorService = Executors.newFixedThreadPool(5);
	}

	// 当进入listview时默认的图片，可换成你自己的默认图片
	int stub_id = -1;

	// 最主要的方法
	public void DisplayImage(String url, ImageView imageView, int stub_id, int width, int height) {

		imageViews.put(imageView, url);
		// 先从内存缓存中查找
		widths.put(imageView, width);
		heights.put(imageView, height);
		Bitmap bitmap = memoryCache.get(url);
		if (bitmap != null)
			imageView.setImageBitmap(bitmap);
		else {
			// 若没有的话则开启新线程加载图片
			queuePhoto(url, imageView);
			if (stub_id != -1) {
				imageView.setImageResource(stub_id);
				this.stub_id = stub_id;
			}
		}
	}

	public void DisplayImage(String url, int width, int height, ImageView imageView, onLoadingFinishListener onLoadingFinishListener, List<View> hideView,
			int stub_id) {
		widths.put(imageView, width);
		heights.put(imageView, height);
		this.onLoadingFinishListener = onLoadingFinishListener;
		// String cacheKey = url + "frontcover_imageView_ref";
		imageViews.put(imageView, url);
		listeners.put(imageView, onLoadingFinishListener);
		Bitmap bitmap = memoryCache.get(url);
		if (bitmap != null) {
			this.onLoadingFinishListener.onFinish(bitmap, imageView, hideView);
		} else {
			// 若没有的话则开启新线程加载图片
			queuePhoto(url, imageView, hideView);
			if (stub_id != -1) {
				imageView.setImageResource(stub_id);
				this.stub_id = stub_id;
			}
		}
	}

	public void setLoading(int id) {
		stub_id = id;
	}

	private void queuePhoto(String url, ImageView imageView, List<View> list) {
		PhotoToLoad p = new PhotoToLoad(url, imageView, list);
		executorService.submit(new PhotosLoader(p));
	}

	private void queuePhoto(String url, ImageView imageView) {
		PhotoToLoad p = new PhotoToLoad(url, imageView, null);
		executorService.submit(new PhotosLoader(p));
	}

	private Bitmap getBitmap(PhotoToLoad photoToLoad) {
		File f = fileCache.getFile(photoToLoad.url);

		// 先从文件缓存中查找是否有
		Bitmap b = decodeFile(f, photoToLoad);

		if (b != null) {
			return b;
		}
		// 最后从指定的url中下载图片
		try {
			Bitmap bitmap = null;
			URL imageUrl = new URL(photoToLoad.url);
			HttpURLConnection conn = (HttpURLConnection) imageUrl.openConnection();
			conn.setConnectTimeout(10000);
			conn.setReadTimeout(20000);
			conn.setInstanceFollowRedirects(true);
			InputStream is = conn.getInputStream();
			OutputStream os = new FileOutputStream(f);
			CopyStream(is, os);
			os.close();
			bitmap = decodeFile(f, photoToLoad);
			return bitmap;
		} catch (Exception ex) {
			ex.printStackTrace();
			return null;
		}
	}

	// decode这个图片并且按比例缩放以减少内存消耗
	private Bitmap decodeFile(File f, PhotoToLoad p) {
		try {
			// decode image size
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(new FileInputStream(f), null, o);

			// Find the correct scale value. It should be the power of 2.

			int width_tmp = o.outWidth, height_tmp = o.outHeight;
			int scale = 1;
			int width = widths.get(p.imageView);
			int height = heights.get(p.imageView);
			if (width != 0 && height != 0) {
				while (true) {
					if (width_tmp / 2 < width || height_tmp / 2 < height)
						break;
					width_tmp /= 2;
					height_tmp /= 2;
					scale *= 2;
				}
			}
			BitmapFactory.Options o2 = new BitmapFactory.Options();
			o2.inSampleSize = scale;
			return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
		} catch (FileNotFoundException e) {
		}
		return null;
	}

	// 任务队列
	private class PhotoToLoad {
		public String url;
		public ImageView imageView;
		public List<View> list;

		public PhotoToLoad(String u, ImageView i, List<View> list) {
			url = u;
			imageView = i;
			this.list = list;
		}

	}

	class PhotosLoader implements Runnable {
		PhotoToLoad photoToLoad;

		PhotosLoader(PhotoToLoad photoToLoad) {
			this.photoToLoad = photoToLoad;
		}

		@Override
		public void run() {
			if (imageViewReused(photoToLoad))
				return;
			Bitmap bmp = getBitmap(photoToLoad);
			memoryCache.put(photoToLoad.url, bmp);

			// 如果线程关闭不再更新UI
			if (!executorService.isShutdown()) {
				if (imageViewReused(photoToLoad))
					return;
				BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
				// 更新的操作放在UI线程中
				Activity a = (Activity) photoToLoad.imageView.getContext();
				a.runOnUiThread(bd);
			}
		}
	}

	/**
	 * 防止图片错位
	 * 
	 * @param photoToLoad
	 * @return
	 */
	boolean imageViewReused(PhotoToLoad photoToLoad) {
		String tag = imageViews.get(photoToLoad.imageView);
		if (tag == null || !tag.equals(photoToLoad.url))
			return true;
		return false;
	}

	// 用于在UI线程中更新界面
	class BitmapDisplayer implements Runnable {
		Bitmap bitmap;
		PhotoToLoad photoToLoad;

		public BitmapDisplayer(Bitmap b, PhotoToLoad p) {
			bitmap = b;
			photoToLoad = p;
		}

		public void run() {
			if (imageViewReused(photoToLoad))
				return;
			if (listeners.get(photoToLoad.imageView) != null) {
				listeners.get(photoToLoad.imageView).onFinish(bitmap, photoToLoad.imageView, photoToLoad.list);
				return;
			}
			if (bitmap != null) {
				photoToLoad.imageView.setImageBitmap(bitmap);
			} else {
				photoToLoad.imageView.setImageResource(stub_id);
			}
		}
	}

	public void clearCache() {
		if (memoryCache != null)
			memoryCache.clear();
		if (fileCache != null)
			fileCache.clear();
	}

	/*
	 * 推出当前Activity执行shutDown，不再执行UI线程更新操作
	 */
	public void shutDownThreadAll() {
		executorService.shutdown();
	}

	public void shutDownThreadAllNow() {
		executorService.shutdownNow();
	}

	public static void CopyStream(InputStream is, OutputStream os) {
		final int buffer_size = 10 * 1024;
		try {
			byte[] bytes = new byte[buffer_size];
			for (;;) {
				int count = is.read(bytes, 0, buffer_size);
				if (count == -1)
					break;
				os.write(bytes, 0, count);
			}
		} catch (Exception ex) {
		}
	}
}