package com.geetion.job138.adapter;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.geetion.job138.R;
import com.geetion.job138.animation.ExpandAnimation;
import com.geetion.job138.model.Interview;
import com.geetion.job138.model.JobRecord;
import com.geetion.job138.model.Leave;
import com.geetion.job138.util.AndroidUtil;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;

public class LeaveListAdapter extends ArrayAdapter<Leave> {
	private LayoutInflater mInflater;
	private int mResource = R.layout.item_leave;
	private Context context;
	private Map<Integer, Boolean> showReplyMap = new HashMap<Integer, Boolean>();

	public LeaveListAdapter(Context context, List<Leave> list) {
		super(context, 0, list);
		mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		this.context = context;
	}

	@Override
	public View getView(final int position, View convertView, final ViewGroup parent) {
		View layout = convertView;
		ViewHolder holder;
		if (layout == null) {
			layout = mInflater.inflate(mResource, parent, false);
			holder = new ViewHolder(layout);
			layout.setTag(holder);
		} else {
			holder = (ViewHolder) layout.getTag();
		}
		final View replyLayout = holder.getReplyLayout();
		if (showReplyMap.containsKey(position)) {
			((LinearLayout.LayoutParams) replyLayout.getLayoutParams()).bottomMargin = 0;
			replyLayout.setVisibility(View.VISIBLE);
		} else {
			((LinearLayout.LayoutParams) replyLayout.getLayoutParams()).bottomMargin = -AndroidUtil.dpToPx(88, context);
			replyLayout.setVisibility(View.GONE);
		}
		ImageButton replyButton = holder.getReplyButton();
		replyButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				ExpandAnimation expandAni = new ExpandAnimation(replyLayout, 200);
				replyLayout.startAnimation(expandAni);
				if (showReplyMap.containsKey(position)) {
					showReplyMap.remove(position);
				} else {
					showReplyMap.put(position, true);
				}
			}
		});
		return layout;
	}

	public class ViewHolder {
		private View replyLayout;
		private ImageButton replyButton;
		private ImageButton delButton;
		private ImageButton sendButton;
		private EditText replyContent;
		private View baseView;

		public ViewHolder(View baseView) {
			this.baseView = baseView;
		}

		public View getReplyLayout() {
			if (replyLayout == null)
				replyLayout = baseView.findViewById(R.id.reply_layout);
			return replyLayout;
		}

		public ImageButton getReplyButton() {
			if (replyButton == null)
				replyButton = (ImageButton) baseView.findViewById(R.id.reply);
			return replyButton;
		}

		public ImageButton getDelButton() {
			if (delButton == null)
				delButton = (ImageButton) baseView.findViewById(R.id.del);
			return delButton;
		}

		public ImageButton getSendButton() {
			if (sendButton == null)
				sendButton = (ImageButton) baseView.findViewById(R.id.button_send);
			return sendButton;
		}

		public EditText getReplyContent() {
			if (replyContent == null)
				replyContent = (EditText) baseView.findViewById(R.id.reply_content);
			return replyContent;
		}

	}
}
