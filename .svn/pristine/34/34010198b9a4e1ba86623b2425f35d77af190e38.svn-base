package com.geetion.job138.util;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 
 * @author 80work
 * @version 0.1
 */

public class FuncUtil {

	/**
	 * 判断字符串是否为空
	 * 
	 * @param text
	 * @return
	 */
	public static boolean isNull(String text) {
		if (text == null) {
			return true;
		} else {
			if (text.length() == 0) {
				return true;
			} else {
				return false;
			}
		}
	}

	/**
	 * 如果字符串为空或者长度等于0，返回""，否则返回字符串
	 * 
	 * @param text
	 * @return
	 */
	public static String nvl(String text) {
		if (text == null) {
			return "";
		} else {
			if (text.length() == 0) {
				return "";
			} else {
				return text;
			}
		}
	}

	/**
	 * 根据出入的List对象遍历成一个 key - > 对象属性object 对应的键值对List key为List每个对象中每个属性的名称
	 * 
	 * @param list
	 * @return List<Map<String, Object>>
	 */
	static public List<Map<String, Object>> toMapList(List list) {
		try {
			List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>();
			for (Object o : list) {
				Map<String, Object> map = new HashMap<String, Object>();
				for (Field filed : o.getClass().getDeclaredFields()) {
					Object value = getFieldValueByName(filed.getName(), o);
					map.put(filed.getName(), value);
				}
				mapList.add(map);
			}
			return mapList;
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 根据出入对象获取对象的值 前提该对象含有getter方法,方法名的命名根据Eclisp生产规范
	 * 
	 * @param fieldName
	 *            : 所要获取的属性的名称
	 * @param o
	 *            : 传入对象
	 */
	static private Object getFieldValueByName(String fieldName, Object o) {
		try {
			String firstLetter = fieldName.substring(0, 1).toUpperCase();
			String getter = "get" + firstLetter + fieldName.substring(1);
			Method method = o.getClass().getMethod(getter, new Class[] {});
			Object value = method.invoke(o, new Object[] {});
			return value;
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 解析出url参数中的键值对 如 "index.jsp?Action=del&id=123"，解析出Action:del,id:123存入map中
	 * 
	 * @param URL
	 *            url地址
	 * @return url请求参数部分
	 */
	public static Map<String, String> URLRequest(String URL) {
		Map<String, String> mapRequest = new HashMap<String, String>();
		String[] arrSplit = null;
		String strUrlParam = TruncateUrlPage(URL);
		if (strUrlParam == null) {
			return mapRequest;
		}
		// 每个键值为一组
		arrSplit = strUrlParam.split("[&]");
		for (String strSplit : arrSplit) {
			String[] arrSplitEqual = null;
			arrSplitEqual = strSplit.split("[=]");

			// 解析出键值
			if (arrSplitEqual.length > 1) {
				// 正确解析
				mapRequest.put(arrSplitEqual[0], arrSplitEqual[1]);

			} else {
				if (arrSplitEqual[0] != "") {
					// 只有参数没有值，不加入
					mapRequest.put(arrSplitEqual[0], "");
				}
			}
		}
		return mapRequest;
	}

	/**
	 * 去掉url中的路径，留下请求参数部分
	 * 
	 * @param strURL
	 *            url地址
	 * @return url请求参数部分
	 */
	public static String TruncateUrlPage(String strURL) {
		String strAllParam = null;
		String[] arrSplit = null;

		strURL = strURL.trim().toLowerCase();

		arrSplit = strURL.split("[?]");
		if (strURL.length() > 1) {
			if (arrSplit.length > 1) {
				if (arrSplit[1] != null) {
					strAllParam = arrSplit[1];
				}
			}
		}

		return strAllParam;
	}

	public static String timeToText(String time) {
		Calendar currentTime = Calendar.getInstance();
		Calendar actionTime = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			actionTime.setTime(sdf.parse(time));
		} catch (ParseException e) {
			e.printStackTrace();
		}
		int days = currentTime.get(Calendar.DAY_OF_YEAR)
				- actionTime.get(Calendar.DAY_OF_YEAR);
		int hours = currentTime.get(Calendar.HOUR_OF_DAY)
				- actionTime.get(Calendar.HOUR_OF_DAY);
		int minutes = currentTime.get(Calendar.MINUTE)
				- actionTime.get(Calendar.MINUTE);
		int seconds = currentTime.get(Calendar.SECOND)
				- actionTime.get(Calendar.SECOND);
		// Log.d("currentTime", sdf.format(currentTime.getTime()));
		// Log.d("time", time);
		if (days >= 7) {
			return time.substring(0, 10);
		} else if (days >= 1) {
			return days + "天前";
		} else if (hours >= 1) {
			return hours + "小时前";
		} else if (minutes >= 1) {
			return minutes + "分钟前";
		} else if (seconds >= 1) {
			return seconds + "秒前";
		} else {
			return "刚刚";
		}
	}
    /**
     * 两个时间相差距离多少天多少小时多少分多少秒
     * @param str1 时间参数 1 格式：1990-01-01 12:00:00
     * @param str2 时间参数 2 格式：2009-01-01 12:00:00
     * @return String 返回值为：xx天xx小时xx分xx秒
     */ 
	public static String getDistanceTime(String str1, String str2) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date one;
		Date two;
		long day = 0;
		long hour = 0;
		long min = 0;
		long sec = 0;
		try {
			one = df.parse(str1);
			two = df.parse(str2);
			long time1 = one.getTime();
			long time2 = two.getTime();
			long diff;
			if (time1 < time2) {
				diff = time2 - time1;
			} else {
				return "结束投注";
			}
			day = diff / (24 * 60 * 60 * 1000);
			hour = (diff / (60 * 60 * 1000) - day * 24);
			min = ((diff / (60 * 1000)) - day * 24 * 60 - hour * 60);
			sec = (diff / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		if (day > 0) {
			return day + "天" + hour + "小时";
		} else if (hour > 0) {
			return hour + "小时" + min + "分钟";
		} else if (min > 0) {
			return min + "分钟" + sec + "秒";
		} else {
			return sec + "秒";
		}
	}
	
	/**
	 * 获取当前年月日字符串
	 * @return
	 */
	public static String getDateString() {
		Calendar cal=Calendar.getInstance();//使用日历类
		String week = getWeekOfDate(new Date());
		String dateString = week + "\n" + cal.get(Calendar.YEAR) + "年" + (cal.get(Calendar.MONTH) + 1) + "月" + cal.get(Calendar.DAY_OF_MONTH);
		return dateString;
	}
	
	/**
     * 获取当前日期是星期几
     * 
     * @param dt
     * @return 当前日期是星期几
     */
    public static String getWeekOfDate(Date dt) {
        String[] weekDays = {"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"};
        Calendar cal = Calendar.getInstance();
        cal.setTime(dt);

        int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
        if (w < 0)
            w = 0;

        return weekDays[w];
    }

    /***
     * 返回未读消息显示
     * @param noRead
     * @return
     */
    public static String showNoRead(int noRead) {
    	int length = String.valueOf(noRead).length();
    	switch (length) {
		case 1:
			return "  " + String.valueOf(noRead);
		case 2:
			return " " + String.valueOf(noRead);
		default:
			return "99+";
		}
    }
}
