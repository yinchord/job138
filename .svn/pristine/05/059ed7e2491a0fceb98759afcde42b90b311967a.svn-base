package com.geetion.job138.fragment.resume;

import java.util.Calendar;
import java.util.Date;

import android.os.AsyncTask;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;

import com.liqi.job.R;
import com.geetion.job138.activity.MyResumeActivity;
import com.geetion.job138.fragment.BaseFragment;
import com.geetion.job138.model.TrainExperience;
import com.geetion.job138.service.PersonInfoSave;
import com.geetion.job138.service.ResumeManageService;
import com.geetion.job138.util.MyHttpException;
import com.geetion.job138.util.UIUtil;

public class TrainInfoChildragment extends BaseFragment {
	public static String TAG = TrainInfoChildragment.class.getName();
	private MyResumeActivity activity;
	private ImageButton btSave, btClose;
	private TrainExperience trainExperience = new TrainExperience();
	private TextView startDateView, endDateView;
	private EditText trainView, addressView, courseView, certificateView, detailView;
	private UpdateTrainInfoTask updateTask;
	private GetTrainInfoTask task;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_resume_trainexperience, container, false);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		activity = (MyResumeActivity) getActivity();
		init();
		getDate();
		super.onActivityCreated(savedInstanceState);
	}

	public void init() {
		btClose = (ImageButton) getView().findViewById(R.id.close_button);
		btSave = (ImageButton) getView().findViewById(R.id.save_button);
		trainView = (EditText) getView().findViewById(R.id.train);
		addressView = (EditText) getView().findViewById(R.id.address);
		courseView = (EditText) getView().findViewById(R.id.course);
		certificateView = (EditText) getView().findViewById(R.id.certificate);
		startDateView = (TextView) getView().findViewById(R.id.start_date);
		startDateView.setOnClickListener(this);
		detailView = (EditText) getView().findViewById(R.id.detail);
		endDateView = (TextView) getView().findViewById(R.id.end_date);
		endDateView.setOnClickListener(this);
		btSave.setOnClickListener(this);
		btClose.setOnClickListener(this);
	}

	public void getDate() {
		Bundle bundle = getArguments();
		if (bundle != null) {
			trainExperience = (TrainExperience) bundle.getSerializable("trainExperience");
			task = new GetTrainInfoTask();
			task.execute();
		}
	}

	public boolean getInfo() {
		String startDate = startDateView.getText().toString();
		if (TextUtils.isEmpty(startDate)) {
			UIUtil.toast(activity, "开始日期不能为空");
			return false;
		}
		String train = trainView.getText().toString();
		if (TextUtils.isEmpty(train)) {
			UIUtil.toast(activity, "培训机构不能为空");
			return false;
		}
		String course = courseView.getText().toString();
		if (TextUtils.isEmpty(course)) {
			UIUtil.toast(activity, "培训课程不能为空");
			return false;
		}
		String endDate = endDateView.getText().toString();
		if (!TextUtils.isEmpty(endDate)) {
			String end[] = endDate.split("-");
			String endYear = end[0];
			String endMonth = end[1];
			trainExperience.setEndYear(endYear);
			trainExperience.setEndMonth(endMonth);
		} else {
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			trainExperience.setEndYear(String.valueOf(calendar.get(Calendar.YEAR)));
			trainExperience.setEndMonth(String.valueOf(calendar.get(Calendar.MONTH) + 1));
		}
		String date[] = startDate.split("-");
		String startYear = date[0];
		String startMonth = date[1];
		trainExperience.setStartMonth(startMonth);
		trainExperience.setStartYear(startYear);
		String address = addressView.getText().toString();
		String certificate = certificateView.getText().toString();
		String detail = detailView.getText().toString();
		trainExperience.setCourse(course);
		trainExperience.setTrain(train);
		trainExperience.setAddress(address);
		trainExperience.setCertificate(certificate);
		trainExperience.setDetail(detail);
		trainExperience.setUserName(PersonInfoSave.resumeInfo.getUserName());
		trainExperience.setId(PersonInfoSave.resumeInfo.getId());
		return true;
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (v == btClose) {
			activity.changeFragmentAnOnResume(TrainInfoFragment.TAG, null);
		} else if (v == btSave) {
			if (getInfo()) {
				updateTask = new UpdateTrainInfoTask();
				updateTask.execute();
			}
		} else if (v == startDateView) {
			UIUtil.datePicker(activity, startDateView);
		} else if (v == endDateView) {
			UIUtil.datePicker(activity, endDateView);
		}
	}

	@Override
	public void onDestroy() {
		if (task != null)
			task.cancel(true);
		if (updateTask != null)
			updateTask.cancel(true);
		super.onDestroy();
	}

	public class GetTrainInfoTask extends AsyncTask<Void, Integer, TrainExperience> {
		protected void onPreExecute() {
			activity.showLoadiing();
			btSave.setClickable(false);
		};

		@Override
		protected TrainExperience doInBackground(Void... arg0) {
			try {
				TrainExperience train = ResumeManageService.getTrainExperienceDetail(trainExperience.getId(), trainExperience.getTrainId());
				return train;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(TrainExperience result) {
			activity.hideLoading();
			btSave.setClickable(true);
			if (result != null) {
				startDateView.setText(result.getStartYear() + "-" + result.getStartMonth() + "-01");
				endDateView.setText(result.getEndYear() + "-" + result.getEndMonth() + "-01");
				trainView.setText(result.getTrain());
				courseView.setText(result.getCourse());
				certificateView.setText(result.getCertificate());
				addressView.setText(result.getAddress());
				detailView.setText(result.getDetail());
				trainExperience = result;
			}
		}
	}

	public class UpdateTrainInfoTask extends AsyncTask<Void, Integer, Integer> {
		protected void onPreExecute() {
			activity.showLoadiing();
			btSave.setClickable(false);
		};

		@Override
		protected Integer doInBackground(Void... arg0) {
			try {
				Integer result = ResumeManageService.newOrUpdateTrainExperience(trainExperience);
				return result;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(Integer result) {
			activity.hideLoading();
			btSave.setClickable(true);
			if (result != null) {
				UIUtil.toast(activity, "添加修改培训经历成功");
				PersonInfoSave.updateSaveID(activity, result);
				activity.changeFragmentAnOnResume(TrainInfoFragment.TAG, null);
			}
		}
	}

}
