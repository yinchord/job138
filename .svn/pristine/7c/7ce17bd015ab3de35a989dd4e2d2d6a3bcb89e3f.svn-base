package com.geetion.job138.fragment.resume;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import com.geetion.job138.R;
import com.geetion.job138.activity.BaseActivity;
import com.geetion.job138.activity.MyResumeActivity;
import com.geetion.job138.application.BaseApplication;
import com.geetion.job138.fragment.BaseFragment;
import com.geetion.job138.model.CityInfo;
import com.geetion.job138.model.ResumeInfo;
import com.geetion.job138.service.CacheService;
import com.geetion.job138.service.PersonInfoSave;
import com.geetion.job138.service.ResumeManageService;
import com.geetion.job138.util.MyHttpException;
import com.geetion.job138.util.UIUtil;
import com.geetion.job138.util.UIUtil.OnSelectAlter;
import com.geetion.job138.widget.custom.SelectCityPop;
import com.geetion.job138.widget.custom.SelectCityPop.SelectCity;

import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.TextView;

public class BaseInfoFragment extends BaseFragment {
	public static String TAG = BaseInfoFragment.class.getName();
	private MyResumeActivity activity;
	private ImageButton closeButton;
	private GoBaseInfoTask task;
	private EditText usernameView, birthView, hightView, cardNumView, workAgeView, graduateView;
	private TextView sexView, educView, nationView, marriageView, nativeView, locView, lifeLocView, cardView;
	private ImageButton saveButton;
	private SelectCityPop cityPop;
	private LayoutInflater inflater;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_resume_baseinfo, container, false);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		activity = (MyResumeActivity) getActivity();
		init();
		super.onActivityCreated(savedInstanceState);
	}

	public void init() {
		closeButton = (ImageButton) getView().findViewById(R.id.close_button);
		closeButton.setOnClickListener(this);
		usernameView = (EditText) getView().findViewById(R.id.username);
		birthView = (EditText) getView().findViewById(R.id.birth);
		hightView = (EditText) getView().findViewById(R.id.hight);
		cardNumView = (EditText) getView().findViewById(R.id.card_num);
		workAgeView = (EditText) getView().findViewById(R.id.word_age);
		graduateView = (EditText) getView().findViewById(R.id.graduate);
		sexView = (TextView) getView().findViewById(R.id.sex);
		sexView.setOnClickListener(this);
		educView = (TextView) getView().findViewById(R.id.educ);
		educView.setOnClickListener(this);
		nationView = (TextView) getView().findViewById(R.id.nation);
		nationView.setOnClickListener(this);
		marriageView = (TextView) getView().findViewById(R.id.marriage);
		marriageView.setOnClickListener(this);
		nativeView = (TextView) getView().findViewById(R.id.native_register);
		nativeView.setOnClickListener(this);
		locView = (TextView) getView().findViewById(R.id.loc);
		locView.setOnClickListener(this);
		cardView = (TextView) getView().findViewById(R.id.card);
		cardView.setOnClickListener(this);
		workAgeView = (EditText) getView().findViewById(R.id.work_age);
		saveButton = (ImageButton) getView().findViewById(R.id.save_button);
		if (PersonInfoSave.resumeInfo.getId() == 0)
			saveButton.setOnClickListener(this);
		else
			getData();
		inflater = activity.getLayoutInflater();
		View cityView = inflater.inflate(R.layout.window_city, null);
		cityPop = new SelectCityPop(cityView, activity, true);
		cityPop.setSelectCity(new SelectCity() {
			@Override
			public void getCity(CityInfo cityInfo) {
				nativeView.setText(CacheService.provincesMap.get(cityInfo.getFid()).getName() + " " + cityInfo.getName());
			}

			@Override
			public void check(HashMap<Integer, CityInfo> chooseMap) {
				// TODO Auto-generated method stub

			}
		});
	}

	public void resetResumeInfo() {
		usernameView.setText(PersonInfoSave.resumeInfo.getName());
		sexView.setText(CacheService.sexKeyMap.get(PersonInfoSave.resumeInfo.getSex()));
		birthView.setText(PersonInfoSave.resumeInfo.getBirth());
		educView.setText(CacheService.educKeyMap.get(PersonInfoSave.resumeInfo.getEdu()));
		graduateView.setText(PersonInfoSave.resumeInfo.getGraduate());
		hightView.setText(PersonInfoSave.resumeInfo.getHeight());
		nationView.setText(CacheService.nationKeyMap.get(PersonInfoSave.resumeInfo.getNation()));
		marriageView.setText(CacheService.marriageKeyMap.get(PersonInfoSave.resumeInfo.getMarriage()));
		nativeView.setText(PersonInfoSave.resumeInfo.getHuKouProvince() + " " + PersonInfoSave.resumeInfo.getHuKouCapital());
		locView.setText(PersonInfoSave.resumeInfo.getProvince() + " " + PersonInfoSave.resumeInfo.getCapital());
		cardView.setText(CacheService.cardKeyMap.get(PersonInfoSave.resumeInfo.getCardType()));
		cardNumView.setText("" + PersonInfoSave.resumeInfo.getIdCard());
		workAgeView.setText("" + PersonInfoSave.resumeInfo.getWorkYear());
	}

	public void getData() {
		task = new GoBaseInfoTask();
		task.execute();
	}

	@Override
	public void onDestroy() {
		if (task != null)
			task.cancel(true);
		super.onDestroy();
	}

	@Override
	public void onClick(View v) {
		if (v == closeButton) {
			activity.hideSelectFragment();
		} else if (v == saveButton) {

		} else if (v == sexView) {
			UIUtil.showSelectAlert(activity, CacheService.sexKeyMap.values().toArray(new String[0]), new OnSelectAlter() {
				public void onSelect(String select) {
					sexView.setText(select);
				}
			});
		} else if (v == educView) {
			UIUtil.showSelectAlert(activity, CacheService.educKeyMap.values().toArray(new String[0]), new OnSelectAlter() {
				public void onSelect(String select) {
					educView.setText(select);
				}
			});
		} else if (v == nationView) {
			UIUtil.showSelectAlert(activity, CacheService.nationKeyMap.values().toArray(new String[0]), new OnSelectAlter() {
				public void onSelect(String select) {
					nationView.setText(select);
				}
			});
		} else if (v == marriageView) {
			UIUtil.showSelectAlert(activity, CacheService.marriageKeyMap.values().toArray(new String[0]), new OnSelectAlter() {
				public void onSelect(String select) {
					marriageView.setText(select);
				}
			});
		} else if (v == cardView) {
			UIUtil.showSelectAlert(activity, CacheService.cardKeyMap.values().toArray(new String[0]), new OnSelectAlter() {
				public void onSelect(String select) {
					cardView.setText(select);
				}
			});
		} else if (v == nativeView) {
			cityPop.showPop(nativeView);
		}
	}

	public class GoBaseInfoTask extends AsyncTask<Void, Integer, ResumeInfo> {
		protected void onPreExecute() {
			activity.showLoadiing();
		};

		@Override
		protected ResumeInfo doInBackground(Void... arg0) {
			try {
				if (CacheService.nationKeyMap.isEmpty())
					ResumeManageService.getNation();
				ResumeInfo resumeInfo = ResumeManageService.getBaseInfo(PersonInfoSave.resumeInfo.getId(), PersonInfoSave.memberInfo.getMemberId());
				return resumeInfo;
			} catch (MyHttpException e) {
				Log.e("MyHttpException", e.getErrorCode());
				UIUtil.toast(activity, e.getErrorMessage());
			}
			return null;
		}

		@Override
		protected void onPostExecute(ResumeInfo result) {
			activity.hideLoading();
			if (result != null) {
				PersonInfoSave.saveResumeBaseInfo(result);
				saveButton.setOnClickListener(BaseInfoFragment.this);
				resetResumeInfo();
			}
		}
	}
}
