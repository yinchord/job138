package com.geetion.job138.fragment;

import android.content.Context;
import android.graphics.drawable.AnimationDrawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Vibrator;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.geetion.job138.R;
import com.geetion.job138.activity.group.BaseGroupActivity;
import com.geetion.job138.listener.ShakeListener;
import com.geetion.job138.listener.ShakeListener.OnShakeListener;
import com.geetion.job138.service.SettingService;
import com.geetion.job138.util.UIUtil;

public class RandomFragment extends BaseFragment {
	public static String TAG = RandomFragment.class.getName();
	private BaseGroupActivity activity;
	private ShakeListener shakeListener;
	private Vibrator vibrator;
	private ImageView randomImage, tipsImage;
	private AnimationDrawable animationDrawable;
	private GetRondomTask task;
	private boolean isFinish = true;
	private RelativeLayout layout;
	private CheckBox voiceBox;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		return inflater.inflate(R.layout.fragment_random, container, false);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		activity = (BaseGroupActivity) getActivity();
		init();
		super.onActivityCreated(savedInstanceState);
	}

	public void init() {
		voiceBox = (CheckBox) getView().findViewById(R.id.voice);
		if (SettingService.getShowVoice(activity)) {
			voiceBox.setChecked(true);
		} else {
			voiceBox.setChecked(false);
		}
		layout = (RelativeLayout) getView().findViewById(R.id.show_job);
		randomImage = (ImageView) getView().findViewById(R.id.box);
		tipsImage = (ImageView) getView().findViewById(R.id.tag_tips);
		vibrator = (Vibrator) activity.getSystemService(Context.VIBRATOR_SERVICE);
		shakeListener = new ShakeListener(activity);
		shakeListener.setOnShakeListener(new OnShakeListener() {
			@Override
			public void onShake() {
				if (isFinish) {
					task = new GetRondomTask();
					vibrator.vibrate(new long[] { 10, 200, 50, 200 }, -1);
					if (SettingService.getShowVoice(activity))
						activity.playSound();
					task.execute();
				} else {
					UIUtil.toast(activity, "求签中, 请稍后...");
				}
			}
		});
		voiceBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			@Override
			public void onCheckedChanged(CompoundButton arg0, boolean arg1) {
				SettingService.openOrCloseVoice(activity);
			}
		});
	}

	@Override
	public void onPause() {
		shakeListener.stop();
		super.onPause();
	}

	@Override
	public void onResume() {
		shakeListener.start();
		super.onResume();
	}

	@Override
	public void onDestroy() {
		shakeListener.stop();
		if (task != null)
			task.cancel(true);
		super.onDestroy();
	}

	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub

	}

	class GetRondomTask extends AsyncTask<Void, String, String> {

		@Override
		protected void onPreExecute() {
			isFinish = false;
			randomImage.setImageResource(R.anim.start_random);
			animationDrawable = (AnimationDrawable) randomImage.getDrawable();
			animationDrawable.setOneShot(false);
			animationDrawable.start();
			tipsImage.setVisibility(View.INVISIBLE);
			layout.setVisibility(View.GONE);
			super.onPreExecute();
		}

		@Override
		protected String doInBackground(Void... params) {
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return "";
		}

		@Override
		protected void onPostExecute(String result) {
			isFinish = true;
			randomImage.setImageResource(R.drawable.icon_box_end);
			tipsImage.setVisibility(View.VISIBLE);
			layout.setVisibility(View.VISIBLE);
			super.onPostExecute(result);
		}
	}
}
